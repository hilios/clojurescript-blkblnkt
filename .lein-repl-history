(require '[cljs.repl :as repl])
(require '[cljs.repl.browser :as browser])  ;; require the browser implementation of IJavaScriptEnv
(def env (browser/repl-env)) ;; create a new environment
(cemerick.piggieback/cljs-repl)
(require 'cljs.repl.browser)
(cemerick.piggieback/cljs-repl :repl-env (doto (cljs.repl.browser/repl-env :port 9000) cljs.repl/-setup))
(js/alert "doop")
(+ 2 3)
(-main)
(defonce myserver (-main))
(piggybackBrowserREPL)
(future (-main))
(future (piggybackBrowserREPL))
(future (-main))
(def ringServer (future (-main)))
(future-cancel ringServer)
(def ringServer (-main))
(def ringServer nil)
(defonce myserver (-main))
(use `sim-cljs.server)
(require `sim-cljs.server)
(defonce myserver (-main))
(watchtower)
(watch
)
(require `watchtower.core)
(watchtower.core/watcher ["sim_cljs/views/"] (watchtower.core/rate 250)(watchtower.core/on-change #(println "doop")))
(println "doop")
(#(println "doop"))
(watchtower.core/watcher ["views/"] (watchtower.core/rate 250)(watchtower.core/on-change #(println "doop")))
(watchtower.core/watch ["views/"] (watchtower.core/rate 250)(watchtower.core/on-change #(println "doop")))
(watchtower.core/watcher ["views/"] (watchtower.core/rate 250)(watchtower.core/on-change #(println "doop")))
(future (println "doop"))
(future #(println "doop"))
(future-cancel *1)
*2
*1
(watch/watch ["sim_cljs/views/"]
         (watch/rate 250)
         (watch/on-change #(require `sim-cljs.server :reload)))
(watch/watch ["sim_cljs/views/"] (watch/rate 250)(watch/on-change #(require `sim-cljs.server :reload)))
(watch/watch ["sim_cljs/views/"] (rate 250)(on-change #(require `sim-cljs.server :reload)))
(watch/watcher ["sim_cljs/views/"] (watch/rate 250)(watch/on-change #(require `sim-cljs.server :reload)))
(.isFile "sim_cljs/views/layout.html")
(require [clojure.java.io :as io])
(require [clojure.java :as io])
(use `clojure.java.io
)
(-> "sim_cljs/views/" file file-seq)
(file "sim_cljs/views/")
(.getName (file "sim_cljs/views/"))
(file "sim_cljs/views/*")
(.isFile (file "sim_cljs/views/"))
(.isFile (file "sim_cljs/views/*"))
(mapcat #(-> % file file-seq) ["sim_cljs/views/"])
(watch
)
(watch/watcher ["src/sim-cljs/views/"] (watch/rate 50)(watch/on-change #(println "files changed: " %)))
(file "sim_cljs/views/")
(copy (file "sim_cljs/views/") (file "sim_cljs/doop/"))
(copy (file "src/sim_cljs/views/") (file "sim_cljs/doop/"))
(copy (file "src/sim_cljs/views/layout.html") (file "sim_cljs/doop/"))
(copy (file "src/sim_cljs/views/layout.html") (file "sim_cljs"))
ls
(copy (file "src/sim_cljs/views/") (file "sim_cljs"))
(file-seq (file ("src/sim_cljs/views/"))
)
(file-seq (file "src/sim_cljs/views/"))
(filter (file-seq (file "src/sim_cljs/views/")) #(.isFile %))
(filter #(.isFile %) (file-seq (file "src/sim_cljs/views/")))
(require `sim-cljs.server :reload)
(defonce server (-main))
(require 'sim-cljs.server :reload)
(file-seq "src/sim_cljs/views/")
(file-seq (clojure.java.io/file "src/sim_cljs/views/"))
(require 'sim-cljs.server :reload)
(watch/watcher ["src/sim_cljs/views/"] (on-change #(println "derp")))
(watch/watcher ["src/sim_cljs/views/"] (watch/on-change #(println "derp")))
(watch/watcher ["sim_cljs/views/"] (watch/on-change #(println "derp")))
(watch/watcher ["sim_cljs/views/"] (watch/rate 100)(watch/on-change #(println "derp")))
(watch/watcher ["src/sim_cljs/views/"] (watch/rate 100)(watch/on-change #(println "derp")))
(-main)
(piggybackBrowserREPL)
(js/alert)
(js/alert doop)
(js/alert "yay")
(-main)
(require 'sim-cljs.server :reload)
(future (-main))
(piggybackBrowserREPL)
(js/alert "doop")
:cljs/quit
